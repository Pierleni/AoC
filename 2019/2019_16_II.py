# line = '''59766832516471105169175836985633322599038555617788874561522148661927081324685821180654682056538815716097295567894852186929107230155154324411726945819817338647442140954601202408433492208282774032110720183977662097053534778395687521636381457489415906710702497357756337246719713103659349031567298436163261681422438462663511427616685223080744010014937551976673341714897682634253850270219462445161703240957568807600494579282412972591613629025720312652350445062631757413159623885481128914333982571503540357043736821931054029305931122179293220911720263006705242490442826574028623201238659548887822088996956559517179003476743001815465428992906356931239533104'''
# original = [int(x) for x in line]
# to_skip = int(''.join(map(str, original[:7])))
# assert to_skip >= len(original)/2
#
# digits = (original * 10000)[to_skip:]
# length = len(digits)
#
# for _ in range(100):
#     for i in range(length - 2, -1, -1):
#         digits[i] += digits[i + 1]
#         digits[i] %= 10
#
# for _ in range(100):
#     cusum = 0
#     for i in range(length - 1, -1, -1):
#         cusum += digits[i]
#         digits[i] = cusum % 10
#
# answer = ''.join(map(str, digits[:8]))
# print('Part 2:', answer)


input = '''59766832516471105169175836985633322599038555617788874561522148661927081324685821180654682056538815716097295567894852186929107230155154324411726945819817338647442140954601202408433492208282774032110720183977662097053534778395687521636381457489415906710702497357756337246719713103659349031567298436163261681422438462663511427616685223080744010014937551976673341714897682634253850270219462445161703240957568807600494579282412972591613629025720312652350445062631757413159623885481128914333982571503540357043736821931054029305931122179293220911720263006705242490442826574028623201238659548887822088996956559517179003476743001815465428992906356931239533104'''

skip = int(input[0:7])
digits = [int(i) for i in input] * 10000

# confirm that only the first 2 elements of the pattern will be used:
assert(len(digits) < 2*skip - 1)

for phase in range(100):
    checksum = sum(digits[skip:])
    new_digits = [0]*skip + [int(str(checksum)[-1])]
    for n in range(skip+2, len(digits)+1):
        checksum -= digits[n-2]
        new_digits += [int(str(checksum)[-1])]
    digits = new_digits

print("Part 2 - ", ''.join(str(i) for i in digits[skip:(skip+8)]))